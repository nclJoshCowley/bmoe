---
title: "Bayesian Mixture of Experts"
date: today
format: html
page-layout: full
toc: true
self-contained: true
params:
  object: !expr NULL
---

```{r setup}
#| include: false
library(bmoe)
library(ggplot2)
library(patchwork)

is_child <- exists("object")

if (!(is_child)) {
  object <- 
    if (params$object$tag == "!expr") {
      eval(parse(text = params$object$value))
    } else {
      params$object
    }
}

.set_bmoe_render_options(object, is_child = is_child,  fig.asp = 0.4)
```


```{r input-bmoe-sim}
#| output: asis
#| include: !expr inherits(object, "bmoe_simstudy")
#| eval: !expr inherits(object, "bmoe_simstudy")
cat("## Simulation", "\n\n")
print("Not implemented yet") # TODO.
```


## Model

::: {.callout-note collapse="true"}
#### JAGS Code
```{r input-stancode}
#| results: asis
cat("```{.r .cell-code}", object$model$model(), "```", sep = "\n")
```
:::


::: {.callout-note collapse="true"}
#### JAGS Controls
```{r input-jags-n}
#| results: asis
cat(sprintf("- `%s = %s`", names(object$jags_n), object$jags_n), sep = "\n\n")
```
:::


::: {.callout-note collapse="true"}
#### Prior Information
```{r input-prior}
#| results: asis
cat(sprintf("- `%s = %s`", names(object$prior), object$prior), sep = "\n\n")
```
:::


::: {.callout-note collapse="true"}
#### Initial Values
```{r input-inits}
rlang::set_names(object$inits, sprintf("Chain %s", seq_along(object$inits)))
```
:::

```{r input-label-switching}
permutations <- attr(object, "permutations")
```

```{r output-label-switching-heading}
if (!is.null(permutations)) knitr::asis_output("## Label Switching\n\n")
```

```{r output-label-switching-table}
if (!is.null(permutations)) {
  lapply(table_permutations(permutations), knitr::kable)
}
```



## Parameters

::: {.panel-tabset}
### Regression
```{r output-regr}
#| opts.label: regr
autoplot(object, "regr", c("density", "trace", "acf"))
```

### Weighting
```{r output-wt}
#| opts.label: wt
autoplot(object, "wt", c("density", "trace", "acf"))
```

### Precision
```{r output-prec}
#| opts.label: prec
autoplot(object, "prec", c("density", "trace", "acf"))
```
:::

```{r output-component-alloc-heading}
if (object$prior$k > 1) knitr::asis_output("## Component Allocations\n\n")
```

```{r output-component-alloc}
#| fig-asp: 0.65
if (object$prior$k > 1) {
  chain_selection <- seq_len(dim(object$output$regr)["chain"])
  names(chain_selection) <- sprintf("Chain %s", seq_along(chain_selection))
  
  lapply(chain_selection, function(.chain) {
    component_allocation_visualisation(object, .chain)
  })
}
```
